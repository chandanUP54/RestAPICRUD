*******************************
Main Java file 
********************************
package com.example.ems1;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Ems1Application {

	public static void main(String[] args) {
		SpringApplication.run(Ems1Application.class, args);
	}

}


********************************
1) HomeController (class)
*******************************
package com.example.ems1.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import com.example.ems1.entity.Employee;
import com.example.ems1.service.EmployeeService;
@CrossOrigin(origins = "http://localhost:3000")
@RestController
public class EmployeeController {
	
	@Autowired
	public EmployeeService empService;

	@PostMapping("/employees/save")  // Create
	public Employee addEmp(@RequestBody Employee emp) {
		return empService.addEmployee(emp);
	}
	
	@GetMapping("/employees") //Read
	public List<Employee> getAll(){
		return empService.listAllEmployee();
	}
	
	@GetMapping("/employees/{id}") //Read
	public Employee findOneEmp(@PathVariable int id) {
		return empService.getOneEmployee(id);
	}
	
	@PutMapping("/employees/update/{id}")
	public Employee updateEmp(@RequestBody Employee emp,@PathVariable int id) {
		return empService.updateEmployee(emp, id);
	}
	
	@DeleteMapping("/employees/delete/{id}")
	public void deteteOne(@PathVariable int id) {
		 empService.deleteEmployee(id);
	}
	
}

*****************************************
2)entity  (class)
********************************************
package com.example.ems1.entity;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;

@Entity
public class Employee {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private int id;
	
	private String firstName;
	private String lastName;
	private String email;
	private String address;
	private Double salary;

create constructor using field
create constructor using super class
create getter and setter (select all)
create toString 


************************************************
3)StudentRepository (interface)
**************************************************
package com.example.ems1.dao;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.example.ems1.entity.Employee;

@Repository
public interface EmployeeRepository extends JpaRepository<Employee, Integer>{

}

**********************************************************
4) EmployeeService(interface) , EmployeeServiceImp (class)
**********************************************************
--->>>EmployeeService
package com.example.ems1.service;

import java.util.List;

import com.example.ems1.entity.Employee;

public interface EmployeeService {

	public Employee addEmployee(Employee emp);
	public List<Employee> listAllEmployee();
	public Employee getOneEmployee(int id);
	public Employee updateEmployee(Employee emp,int id);
	public void deleteEmployee(int id);
}

-----------------------------
-------->>>>> EmployeeServiceImp
package com.example.ems1.service;

import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.example.ems1.dao.EmployeeRepository;
import com.example.ems1.entity.Employee;

@Service
public class EmployeeServiceImp implements EmployeeService {

	@Autowired
	public EmployeeRepository empRepo;
	
	public Employee addEmployee(Employee emp) {
		return empRepo.save(emp);
	}
	public List<Employee> listAllEmployee(){
		return empRepo.findAll();
	}
	public Employee getOneEmployee(int id) {
		return empRepo.findById(id).get();
	}
	public Employee updateEmployee(Employee emp,int id) {
		Employee oldEmployee=empRepo.findById(id).get();
		if(oldEmployee!=null) {
			emp.setId(id);
		return	empRepo.save(emp);
		}
		return null;
	}
	public void deleteEmployee(int id) {
		Employee emp=empRepo.findById(id).get();
		if(emp!=null) {
			empRepo.deleteById(id);
		}
	}
}



*************************************************
5) application.property
*****************************************************
server.port=8091
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/react_ems1
spring.datasource.username=root
spring.datasource.password=admin
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update

*****************************************************
6) dependency (pom.xml)
********************************************************
                <dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jdbc</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		
		<dependency> 
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>8.0.33</version>
			<scope>runtime</scope>
		</dependency>
		
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
